import java.util.Scanner;

public class Main {
    private static double[][] arr = new double[3][3];
    private static double[][] Jacob = new double[3][3];
    private static double[][] Rotate = new double[3][3];
    private static double[] ans = new double[3];
    private static double[] f = new double[3];
    private static double[] DX = new double[3];
    private static double delta = 0.001;
    private static double eps = 0.005;
    private static double max = Double.MIN_VALUE;
    private static double f1(double x) {
        return 3*x;
    }
    private static double f2(double y) {
        return 2*y;
    }
    private static double f3(double z) {
        return  -z - 8;
    }
    private static double f4(double x) {
        return x;
    }
    private static double f5(double y) {
        return -y;
    }
    private static double f6(double z) {
        return z + 2;
    }
    private  static double f7(double x) {
        return 2*x;
    }
    private static double f8(double y) {
        return -3*y;
    }
    private static double f9(double z) {
        return -5*z - 1;
    }
    //Answer is: 1,2,-1
    /*private static double f1(double x) {
        return 3*x;
    }
    private static double f2(double y) {
        return 2*y;
    }
    private static double f3(double z) {
        return  -z - 8;
    }
    private static double f4(double x) {
        return x;
    }
    private static double f5(double y) {
        return -y;
    }
    private static double f6(double z) {
        return z + 2;
    }
    private  static double f7(double x) {
        return 2*x;
    }
    private static double f8(double y) {
        return -3*y;
    }
    private static double f9(double z) {
        return -5*z - 1;
    }*/
    //Answer : 0.785,0.4966,0.3699
    /*
    private static double f1(double x) {
        return x*x;
    }
    private static double f2(double y) {
        return y*y;
    }
    private static double f3(double z) {
        return  z*z - 1;
    }
    private static double f4(double x) {
        return 2*x*x;
    }
    private static double f5(double y) {
        return y*y;
    }
    private static double f6(double z) {
        return -4*z;
    }
    private  static double f7(double x) {
        return 3*x*x;
    }
    private static double f8(double y) {
        return -4*y;
    }
    private static double f9(double z) {
        return z*z;
    }
    */
    private static void  InitArr(double x) {
        arr[0][0] = f1(x);
        arr[0][1] = f2(x);
        arr[0][2] = f3(x);
        arr[1][0] = f4(x);
        arr[1][1] = f5(x);
        arr[1][2] = f6(x);
        arr[2][0] = f7(x);
        arr[2][1] = f8(x);
        arr[2][2] = f9(x);
    }
    private static double InitJacob(double type) {
        double res = 0;
        if(type == 1) {
            res = (f1(ans[0] + delta) - f1(ans[0])) / delta;
        }else  if(type == 2) {
            res = (f2(ans[1] + delta) - f2(ans[1])) / delta;
        }else  if(type == 3) {
            res = (f3(ans[2] + delta) - f3(ans[2])) / delta;
        }else if(type == 4) {
            res = (f4(ans[0] + delta) - f4(ans[0])) / delta;
        }else if(type == 5) {
            res = (f5(ans[1] + delta) - f5(ans[1])) / delta;
        }else if(type == 6) {
            res = (f6(ans[2] + delta) - f6(ans[2])) / delta;
        }else if(type == 7) {
            res = (f7(ans[0] + delta) - f7(ans[0])) / delta;
        }else if(type == 8) {
            res = (f8(ans[1] + delta) - f8(ans[1])) / delta;
        }else if(type == 9) {
            res = (f9(ans[2] + delta) - f9(ans[2])) / delta;
        }
        return res;
    }
    private static void InitAns() {
        ans[0] = 0.5;
        ans[1] = 0.5;
        ans[2] = 0.5;
    }
    private static void InitF() {
        f[0] = f1(ans[0]) + f2(ans[1]) + f3(ans[2]);
        f[1] = f4(ans[0]) + f5(ans[1]) + f6(ans[2]);
        f[2] = f7(ans[0]) + f8(ans[1]) + f9(ans[2]);
    }
    private static double getDop(int row,int col) {
        double[][] temp = new double[2][2];
        row --;
        col --;
        if(row == 0 && col == 0) {
            temp[0][0] = Jacob[1][1];
            temp[0][1] = Jacob[1][2];
            temp[1][0] = Jacob[2][1];
            temp[1][1] = Jacob[2][2];
        } else if (row == 0 && col == 1) {
            temp[0][0] = Jacob[1][0];
            temp[0][1] = Jacob[2][0];
            temp[1][0] = Jacob[1][2];
            temp[1][1] = Jacob[2][2];
        } else if(row == 0 && col == 2) {
            temp[0][0] = Jacob[1][0];
            temp[0][1] = Jacob[2][0];
            temp[1][0] = Jacob[1][1];
            temp[1][1] = Jacob[2][1];
        } else if(row == 1 && col == 0) {
            temp[0][0] = Jacob[0][1];
            temp[0][1] = Jacob[0][2];
            temp[1][0] = Jacob[2][1];
            temp[1][1] = Jacob[2][2];
        } else if(row == 1 && col == 1) {
            temp[0][0] = Jacob[0][0];
            temp[0][1] = Jacob[0][2];
            temp[1][0] = Jacob[2][0];
            temp[1][1] = Jacob[2][2];
        } else if(row == 1 && col == 2) {
            temp[0][0] = Jacob[0][0];
            temp[0][1] = Jacob[0][1];
            temp[1][0] = Jacob[2][0];
            temp[1][1] = Jacob[2][1];
        } else if(row == 2 && col == 0) {
            temp[0][0] = Jacob[0][1];
            temp[0][1] = Jacob[0][2];
            temp[1][0] = Jacob[1][1];
            temp[1][1] = Jacob[1][2];
        } else if(row == 2 && col == 1) {
            temp[0][0] = Jacob[0][0];
            temp[0][1] = Jacob[1][0];
            temp[1][0] = Jacob[0][2];
            temp[1][1] = Jacob[1][2];
        }  else if(row == 2 && col == 2) {
            temp[0][0] = Jacob[0][0];
            temp[0][1] = Jacob[0][1];
            temp[1][0] = Jacob[1][0];
            temp[1][1] = Jacob[1][1];
        }
        double res = getDeterminant2(temp) * Math.pow(-1, row + col);
        return res;
    }

    private static double getDeterminant2(double[][] temp) {
        return temp[0][0] * temp[1][1] - temp[0][1] * temp[1][0];
    }

    private static void getRotateFromJacob() {
        Rotate[0][0] = getDop(1,1);
        Rotate[0][1] = getDop(2,1);
        Rotate[0][2] = getDop(3,1);
        Rotate[1][0] = getDop(1,2);
        Rotate[1][1] = getDop(2,2);
        Rotate[1][2] = getDop(3,2);
        Rotate[2][0] = getDop(1,3);
        Rotate[2][1] = getDop(2,3);
        Rotate[2][2] = getDop(3,3);
        double det = getDeterminant(Jacob);
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                Rotate[i][j] *= 1 / det;
            }
        }
    }

    private static double getDeterminant(double[][] jacob) {
        return Jacob[0][0] * Jacob[1][1] * Jacob[2][2] + Jacob[0][1] * Jacob[1][2] * Jacob[2][0] + Jacob[1][0] * Jacob[2][1] * Jacob[0][2] - Jacob[2][0] * Jacob[1][1] * Jacob[0][2] - Jacob[0][0] * Jacob[2][1] * Jacob[1][2] - Jacob[0][1] * Jacob[1][0] * Jacob[2][2];
    }
    private static void prepareFor() {
        Jacob[0][0] = InitJacob(1);
        Jacob[0][1] = InitJacob(2);
        Jacob[0][2] = InitJacob(3);
        Jacob[1][0] = InitJacob(4);
        Jacob[1][1] = InitJacob(5);
        Jacob[1][2] = InitJacob(6);
        Jacob[2][0] = InitJacob(7);
        Jacob[2][1] = InitJacob(8);
        Jacob[2][2] = InitJacob(9);
        InitF();
        getRotateFromJacob();
        for (int i = 0; i < DX.length; i++) {
            double sum = 0;
            for (int j = 0; j < 3; j++) {
                sum += Rotate[i][j] * f[j];
            }
            DX[i] = sum;
            ans[i] -= DX[i];
        }
        max = getMax(DX);
    }
    private static void Print(double[] arr) {
        System.out.println();
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    private static void NewtonsMethod() {
        InitAns();
        prepareFor();
        if(max < eps) {
            for (int i = 0; i < DX.length; i++) {
                System.out.println(DX[i] + " ");
            }
        } else {
            while (max > eps) {
                prepareFor();
            }
            for (int i = 0; i < DX.length; i++) {
                System.out.print(ans[i] + " ");
            }
        }
    }
    private static double getMax(double[] arr) {
        double max = Double.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            if(max < Math.abs(arr[i])) {
                max = arr[i];
            }
        }
        return max;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        NewtonsMethod();
    }
}
