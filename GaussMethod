import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.util.List;

public class Main {

    private static final int ROWS = 4;
    private static final int COLUMNS = ROWS + 1;
    private static void InitArray(double[][] arr) throws FileNotFoundException {
        List<Double> list = readFile();
        int k = 0;
        while (k < list.size()) {
            for(int i = 0;i < ROWS;i ++) {
                for(int j = 0;j < COLUMNS;j ++) {
                    arr[i][j] = list.get(k);
                    k ++;
                }
            }
        }
    }
    private static void PrintArray(double[][] arr) {
        int len = arr.length;
        System.out.println("The array is: ");

        for(int i = 0;i < len;i ++) {
            for(int j = 0;j < len + 1;j ++) {
                String arrIJ;
                if(arr[i][j] == -0.0 || arr[i][j] == 0.0) {
                    arrIJ = "0";
                }else {
                    arrIJ = String.format("%.0f", arr[i][j]);
                }
                System.out.print(arrIJ + " ");
            }
            System.out.println();
        }
    }
    private static void GaussMethod(double[][] arr) {
        int len = arr.length;
        int startX = 0,startY = 0;
        while (startX < len && startY < len) {
            for(int i = startX + 1;i < len;i ++) {
                if(arr[i][startY] != 0){
                    double C = arr[startX][startY] / arr[i][startY];
                    for(int j = startY;j < len + 1;j ++) {
                        arr[i][j] = arr[startX][j] - C * arr[i][j];
                    }
                }
            }
            startX ++;
            startY ++;
        }
    }
    private static void NormalizingArr(double[][] arr) {
        int startX = 0,startY = 0;
        int len = arr.length;
        while (startX < len && startY < len) {
            double num = arr[startX][startY];
            if(num != 0){
                for(int i = 0;i < len + 1;i ++) {
                    arr[startX][i] /= num;
                }
            }
            startX ++;
            startY ++;
        }
    }
    private static void SoluteArr(double[][] arr) {
        int len = arr.length;
        int startX = len - 1;
        int startY = len - 1;
        while (startX > 0 && startY > 0) {
            for(int i = 0;i < startX;i ++) {
                if(arr[i][startY] != 0.0 || arr[i][startY] != -0.0) {
                    if(arr[startX][startY] != 0) {
                        double C = arr[i][startY] / arr[startX][startY];
                        for(int j = startY;j < len + 1;j ++) {
                            arr[i][j] -= C * arr[startX][j];
                        }
                    }
                }
            }
            startX --;
            startY --;
        }

    }
    private static List<Double> readFile() throws FileNotFoundException {
        String separator = File.separator;
        String filePath = separator + "Users" + separator + "vladg" + separator + "OneDrive" + separator + "Рабочий стол" + separator + "3On3Array.txt";
        File file = new File(filePath);
        Scanner scanner = new Scanner(file);
        List<Double> list = new ArrayList<>();
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] nums = line.split(" ");
            for(int i = 0;i < nums.length;i ++) {
                list.add((double)Integer.parseInt(nums[i]));
            }
        }
        return list;
    }
    public static void main(String[] args) throws FileNotFoundException {
        double[][] arr = new double[ROWS][COLUMNS];
        InitArray(arr);
        GaussMethod(arr);
        NormalizingArr(arr);
        SoluteArr(arr);
        PrintArray(arr);
    }
}
